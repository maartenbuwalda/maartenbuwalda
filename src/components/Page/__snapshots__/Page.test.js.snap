// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Page component mounts correctly 1`] = `
.c3 {
  width: 10rem;
  height: 10rem;
  border-radius: 100%;
  background: #A8A8A8;
  -webkit-animation: indicating 1s infinite;
  animation: indicating 1s infinite;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 {
  background: #E5E5E8;
  margin: 0;
  overflow: hidden;
  height: 30rem;
  max-height: 15rem;
  width: 100%;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0 img {
  -webkit-animation: appear .5s ease-out;
  animation: appear .5s ease-out;
  display: block;
  max-height: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  min-height: 30rem;
  width: 100%;
  background: #E5E5E8;
}

.c4 section {
  padding: 4rem 2rem;
  -webkit-transition: background-color 1s;
  transition: background-color 1s;
}

.c4 > section:nth-child(even) {
  background-color: rgba(,0.2);
}

.c4 h2 {
  font-size: 2rem;
  margin: 0;
}

.c4 p {
  line-height: 1.7;
  font-size: 1.2rem;
  color: rgba(0,0,0,0.8);
}

@media (min-width:768px) {
  .c0 {
    max-height: 30rem;
  }
}

@media (min-width:768px) {
  .c4 section {
    padding: 4rem;
  }
}

<Page
  page={
    Object {
      "content": "test",
      "image": "test",
    }
  }
>
  <HeaderImage
    image="test"
    updateTheme={[Function]}
  >
    <styled.figure>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "lastClassName": "c0",
              "rules": Array [
                "
  background: ",
                "#E5E5E8",
                ";
  margin: 0;
  overflow: hidden;
  height: 30rem;
  max-height: 15rem;
  width: 100%;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;

  img {
    animation: appear .5s ease-out;
    display: block;
    max-height: 100%;
  }

  @media (min-width: ",
                "768px",
                ") {
    max-height: 30rem;
  }
",
              ],
            },
            "displayName": "styled.figure",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "figure",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <figure
          className="c0"
        >
          <Img
            container={[Function]}
            decode={true}
            loader={
              <ForwardRef>
                <Loading />
              </ForwardRef>
            }
            src="test"
            unloader={false}
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": true,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 30rem;
  width: 100%;
  background: ",
                        "#E5E5E8",
                        ";
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c1"
                >
                  <Loading>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bwzfXH",
                              "isStatic": true,
                              "lastClassName": "c2",
                              "rules": Array [
                                "
  display: flex;
  justify-content: center;
  align-items: center;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bwzfXH",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c2"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": true,
                                    "lastClassName": "c3",
                                    "rules": Array [
                                      "
  width: 10rem;
  height: 10rem;
  border-radius: 100%;
  background: ",
                                      "#A8A8A8",
                                      ";
  animation: indicating 1s infinite;


  @keyframes indicating {
    0% {
      opacity: 1;
      transform: scale(0);
    } 100% {
      transform: scale(1.0);
      opacity: 0;
    }
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c3"
                              />
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </Loading>
                </div>
              </StyledComponent>
            </styled.div>
          </Img>
        </figure>
      </StyledComponent>
    </styled.figure>
  </HeaderImage>
  <styled.article
    theme={
      Object {
        "hex": Object {
          "colorDark": "",
          "colorLight": "",
          "colorMutedDark": "",
          "colorMutedLight": "",
          "colorMutedRegular": "",
          "colorRegular": "",
        },
        "rgb": Object {
          "colorDark": "",
          "colorLight": "",
          "colorMutedDark": "",
          "colorMutedLight": "",
          "colorMutedRegular": "",
          "colorRegular": "",
        },
      }
    }
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": false,
            "lastClassName": "c4",
            "rules": Array [
              "

  section {
    padding: 4rem 2rem;
    transition: background-color 1s;
  }

  @media(min-width: ",
              "768px",
              ") {
    section {
      padding: 4rem;
    }
  }

  > section:nth-child(even) {
    background-color: rgba(",
              [Function],
              ", 0.2);
  }

  h2 {
    font-size: 2rem;
    margin: 0;
  }

  p {
    line-height: 1.7;
    font-size: 1.2rem;
    color: ",
              "rgba(0, 0, 0, 0.8)",
              "
  }
",
            ],
          },
          "displayName": "styled.article",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": "article",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      theme={
        Object {
          "hex": Object {
            "colorDark": "",
            "colorLight": "",
            "colorMutedDark": "",
            "colorMutedLight": "",
            "colorMutedRegular": "",
            "colorRegular": "",
          },
          "rgb": Object {
            "colorDark": "",
            "colorLight": "",
            "colorMutedDark": "",
            "colorMutedLight": "",
            "colorMutedRegular": "",
            "colorRegular": "",
          },
        }
      }
    >
      <article
        className="c4"
      >
        test
      </article>
    </StyledComponent>
  </styled.article>
</Page>
`;
